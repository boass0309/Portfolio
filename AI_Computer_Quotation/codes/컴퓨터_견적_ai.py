# -*- coding: utf-8 -*-
"""컴퓨터 견적 AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KM8b0AgQ5nnVaFQfP3KKx8uc8S76GCaQ
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import re

# CSV 파일 로드
file_path = '/content/drive/MyDrive/computer_parts.csv'
computer_parts = pd.read_csv(file_path)
# 데이터 정제 함수 정의
def clean_text(text):
    # 정규 표현식을 사용하여 문자열에서 알파벳과 숫자만 남기고 나머지 제거
    cleaned_text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
    return cleaned_text.strip()

# 데이터셋의 각 열에 대해 정제 적용
computer_parts['name'] = computer_parts['name'].apply(clean_text)
computer_parts['brand'] = computer_parts['brand'].apply(clean_text)
computer_parts['category'] = computer_parts['category'].apply(clean_text)
computer_parts['price'] = computer_parts['price'].apply(clean_text)
# 데이터 확인
print(computer_parts)

computer_parts['price'] = pd.to_numeric(computer_parts['price'], errors='coerce')
computer_parts.dropna(subset=['price'], inplace=True)

# 필요한 컬럼만 선택
features = ['name', 'category', 'brand', 'price']
computer_parts = computer_parts[features]

# NaN 값 처리
computer_parts.fillna('', inplace=True)

# 데이터프레임 기본 정보 확인
print(computer_parts.info())

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def combine_features(row):
    return row['name'] + ' ' + row['category'] + ' ' + row['brand']

computer_parts['combined_features'] = computer_parts.apply(combine_features, axis=1)

# TF-IDF 벡터화
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(computer_parts['combined_features'])
print(tfidf_matrix)

# 코사인 유사도 계산
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
print(cosine_sim)

# 예산 분배 비율 설정
budget_distribution = {
    '게임용': {'CPU': 0.2, 'GPU': 0.3, 'RAM': 0.15, 'PC CASE': 0.05, 'MOTHERBOARD': 0.1, 'GRAPHIC CARD': 0.2},
    '가정용': {'CPU': 0.25, 'RAM': 0.2, 'PC CASE': 0.1, 'MOTHERBOARD': 0.15, 'PSU': 0.15, 'CABLE': 0.05, '방열판': 0.05, 'SSD': 0.05},
    '디자인용': {'CPU': 0.2, 'GPU': 0.2, 'RAM': 0.2, 'PC CASE': 0.05, 'MOTHERBOARD': 0.1, 'GRAPHIC CARD': 0.15, 'PSU': 0.05, 'CABLE': 0.025, '방열판': 0.025},
    '연구용': {'CPU': 0.3, 'RAM': 0.25, 'MOTHERBOARD': 0.15, 'PSU': 0.15, 'SSD': 0.1, 'KEYBOARD': 0.025, 'MONITOR': 0.025}
}

# 추천 함수 정의
def recommend_computer_parts(usage, budget, preferred_brand='', cosine_sim=cosine_sim, data=computer_parts):
    # 용도에 맞는 예산 분배 비율 가져오기
    if usage in budget_distribution:
        parts_distribution = budget_distribution[usage]
    else:
        print(f"Usage '{usage}' is not defined in budget distribution.")
        return pd.DataFrame()

    selected_parts = []

    # 각 파트별로 예산 계산하고 추천 부품 선택
    for part, ratio in parts_distribution.items():
        category_budget = budget * ratio

        # 카테고리에 해당하는 부품 필터링
        filtered_parts = data[data['category'] == part]

        # 예산 내에 맞는 부품만 선택
        affordable_parts = filtered_parts[filtered_parts['price'] <= category_budget]

        if not affordable_parts.empty:
            if preferred_brand:
                # 선호 브랜드 필터링
                preferred_parts = affordable_parts[affordable_parts['brand'] == preferred_brand]
                if not preferred_parts.empty:
                    selected_part = preferred_parts.sort_values(by='price').iloc[0]
                else:
                    selected_part = affordable_parts.sort_values(by='price').iloc[0]
            else:
                selected_part = affordable_parts.sort_values(by='price').iloc[0]
        else:
            print(f"No parts within budget for category '{part}'.")
            selected_part = pd.Series({'name': 'Not Found', 'category': part, 'brand': '', 'price': float('inf')})

        selected_parts.append(selected_part)

    return selected_parts

def get_user_input():
    usage = input("사용 용도를 입력하세요 (게임용, 가정용, 디자인용, 연구용): ")
    budget = float(input("예산을 입력하세요 (원 단위): "))
    preferred_brand = input("선호하는 브랜드가 있으면 입력하세요 (없으면 엔터): ").strip()
    return usage, budget, preferred_brand

usage, budget, preferred_brand = get_user_input()
recommended_parts = recommend_computer_parts(usage, budget, preferred_brand)

print("\n추천 부품 리스트:")
sum = 0
for part in recommended_parts:
    print(f"부품명: {part['name']}, 카테고리: {part['category']}, 브랜드: {part['brand']}, 가격: {part['price']} 원")
    sum += part['price']
print("총 가격 : ", sum)